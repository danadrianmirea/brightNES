#ifndef __PPU_H__
#define __PPU_H__

#define PPUCTRL 0x2000
#define PPUMASK 0x2001
#define PPUSTATUS 0x2002
#define OAMADDR 0x2003
#define OAMDATA 0x2003
#define PPUSCROLL 0x2005
#define PPUADDR 0x2006
#define PPUDATA 0x2007

#include <stdbool.h>

#include "types.h"
#include "disp.h"
#include "cpu.h"

// Original NTSC palette
// 64 colors, 24 bits each in .pal format (0xrr 0xgg 0xbb)
const u8 PALETTE_2C02_NTSC[192] = {
    0x52, 0x52, 0x52, 0x00, 0x00, 0x80, 0x08, 0x00, 0x80, 0x2e, 0x00, 0x7e, 0x4a, 0x00, 0x4e, 0x50,
    0x00, 0x06, 0x44, 0x00, 0x00, 0x26, 0x08, 0x00, 0x0a, 0x20, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x32,
    0x00, 0x00, 0x26, 0x0a, 0x00, 0x1c, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xa4, 0xa4, 0xa4, 0x00, 0x38, 0xce, 0x34, 0x16, 0xec, 0x5e, 0x04, 0xdc, 0x8c, 0x00, 0xb0, 0x9a,
    0x00, 0x4c, 0x90, 0x18, 0x00, 0x70, 0x36, 0x00, 0x4c, 0x54, 0x00, 0x0e, 0x6c, 0x00, 0x00, 0x74,
    0x00, 0x00, 0x6c, 0x2c, 0x00, 0x5e, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0x4c, 0x9c, 0xff, 0x7c, 0x78, 0xff, 0xa6, 0x64, 0xff, 0xda, 0x5a, 0xff, 0xf0,
    0x54, 0xc0, 0xf0, 0x6a, 0x56, 0xd6, 0x86, 0x10, 0xba, 0xa4, 0x00, 0x76, 0xc0, 0x00, 0x46, 0xcc,
    0x1a, 0x2e, 0xc8, 0x66, 0x34, 0xc2, 0xbe, 0x3a, 0x3a, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xb6, 0xda, 0xff, 0xc8, 0xca, 0xff, 0xda, 0xc2, 0xff, 0xf0, 0xbe, 0xff, 0xfc,
    0xbc, 0xee, 0xfa, 0xc2, 0xc0, 0xf2, 0xcc, 0xa2, 0xe6, 0xda, 0x92, 0xcc, 0xe6, 0x8e, 0xb8, 0xee,
    0xa2, 0xae, 0xea, 0xbe, 0xae, 0xe8, 0xe2, 0xb0, 0xb0, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

typedef struct {
    u8 N: 2; // LSB
    u8 I: 1;
    u8 S: 1;
    u8 B: 1;
    u8 H: 1;
    u8 P: 1;
    u8 V: 1; // MSB
} ppu_ctrl_t;

typedef struct {
    u8 S: 1; // LSB
    u8 m: 1;
    u8 M: 1;
    u8 b: 1;
    u8 s: 1;
    u8 R: 1;
    u8 G: 1;
    u8 B: 1; // MSB
} ppu_mask_t;

typedef struct {
    u8 u: 5; // LSB
    u8 O: 1;
    u8 S: 1;
    u8 V: 1; // MSB
} ppu_status_t;

typedef enum {
    PPU_BLANKING,
    PPU_RENDERING
} ppu_sm_t ;

typedef struct {

    ppu_ctrl_t ppuctrl;
    ppu_mask_t ppumask;
    ppu_status_t ppustatus;
    u8 oamaddr;
    u8 oamdata;
    u8 ppuscroll;
    u8 ppuaddr;
    u8 ppudata;
    u8 oamdma;

    u8 oam[0x100];
    u8 palette_ram[0x20];

    u8 (*bus_read)(u16);
    void (*bus_write)(u8, u16);

    u16 _row;
    u16 _col;
    u8 _rgba_palette[192];

    // internal registers
    u16 _v;
    u16 _t;
    u8 _x;
    u8 _y;
    u8 _w;
    
    ppu_sm_t state;
    
} ppu_state_t;

// ? should we tick the PPU forward or simply blit it
// ticking forward seems the best bet. 
// TODO lot of state machines!
void ppu_tick(ppu_state_t *ppu_st, cpu_state_t *cpu_st, disp_t *disp);

#endif
